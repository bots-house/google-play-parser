package scraper

import (
	"strconv"
	"strings"
	"time"

	"github.com/bots-house/google-play-parser/internal/ramda"
	"github.com/bots-house/google-play-parser/internal/shared"
	"github.com/bots-house/google-play-parser/models"
)

const (
	baseURL        = "https://play.google.com"
	appsDetailsURL = "/store/apps/details"
	storeURL       = "/store/apps"
	searchURL      = "/store/search"
	listURL        = "/_/PlayStoreUi/data/batchexecute?rpcids=vyAe2&source-path=%2Fstore%2Fapps&f.sid=-4178618388443751758&bl=boq_playuiserver_20220612.08_p0&authuser=0&soc-app=121&soc-platform=1&soc-device=1&_reqid=82003&rt=c"
	appPagesURL    = "/_/PlayStoreUi/data/batchexecute"
	datasafetyURL  = "/store/apps/datasafety"
	permissionsURL = `/_/PlayStoreUi/data/batchexecute?rpcids=qnKhOb&f.sid=-697906427155521722&bl=boq_playuiserver_20190903.08_p0&authuser&soc-app=121&soc-platform=1&soc-device=1&_reqid=1065213`

	vary = "VARY"

	listRequestBody = `[[["vyAe2","[[null,[[8,[20,%d]],true,null,[64,1,195,71,8,72,9,10,11,139,12,16,145,148,150,151,152,27,30,31,96,32,34,163,100,165,104,169,108,110,113,55,56,57,122],[null,null,[[[true],null,[[null,[]]],null,null,null,null,[null,2],null,null,null,null,null,null,[1],null,null,null,null,null,null,null,[1]],[null,[[null,[]]]],[null,[[null,[]]],null,[true]],[null,[[null,[]]]],null,null,null,null,[[[null,[]]]],[[[null,[]]]]],[[[[7,1],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[7,31],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[7,104],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[7,9],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[7,8],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[7,27],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[7,12],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[7,65],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[7,110],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[7,88],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[7,11],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[7,56],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[7,55],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[7,96],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[7,10],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[7,122],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[7,72],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[7,71],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[7,64],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[7,113],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[7,139],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[7,150],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[7,169],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[7,165],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[7,151],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[7,163],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[7,32],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[7,16],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[7,108],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[7,100],[[1,73,96,103,97,58,50,92,52,112,69,19,31,101,123,74,49,80,38,20,10,14,79,43,42,139]]],[[9,1],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[9,31],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[9,104],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[9,9],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[9,8],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[9,27],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[9,12],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[9,65],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[9,110],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[9,88],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[9,11],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[9,56],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[9,55],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[9,96],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[9,10],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[9,122],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[9,72],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[9,71],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[9,64],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[9,113],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[9,139],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[9,150],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[9,169],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[9,165],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[9,151],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[9,163],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[9,32],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[9,16],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[9,108],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[9,100],[[1,7,9,24,12,31,5,15,27,8,13,10]]],[[17,1],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[17,31],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[17,104],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[17,9],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[17,8],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[17,27],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[17,12],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[17,65],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[17,110],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[17,88],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[17,11],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[17,56],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[17,55],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[17,96],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[17,10],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[17,122],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[17,72],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[17,71],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[17,64],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[17,113],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[17,139],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[17,150],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[17,169],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[17,165],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[17,151],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[17,163],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[17,32],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[17,16],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[17,108],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[17,100],[[1,7,9,25,13,31,5,41,27,8,14,10]]],[[10,1],[[1,7,6,9]]],[[10,31],[[1,7,6,9]]],[[10,104],[[1,7,6,9]]],[[10,9],[[1,7,6,9]]],[[10,8],[[1,7,6,9]]],[[10,27],[[1,7,6,9]]],[[10,12],[[1,7,6,9]]],[[10,65],[[1,7,6,9]]],[[10,110],[[1,7,6,9]]],[[10,88],[[1,7,6,9]]],[[10,11],[[1,7,6,9]]],[[10,56],[[1,7,6,9]]],[[10,55],[[1,7,6,9]]],[[10,96],[[1,7,6,9]]],[[10,10],[[1,7,6,9]]],[[10,122],[[1,7,6,9]]],[[10,72],[[1,7,6,9]]],[[10,71],[[1,7,6,9]]],[[10,64],[[1,7,6,9]]],[[10,113],[[1,7,6,9]]],[[10,139],[[1,7,6,9]]],[[10,150],[[1,7,6,9]]],[[10,169],[[1,7,6,9]]],[[10,165],[[1,7,6,9]]],[[10,151],[[1,7,6,9]]],[[10,163],[[1,7,6,9]]],[[10,32],[[1,7,6,9]]],[[10,16],[[1,7,6,9]]],[[10,108],[[1,7,6,9]]],[[10,100],[[1,7,6,9]]],[[1,1],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[1,31],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[1,104],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[1,9],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[1,8],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[1,27],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[1,12],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[1,65],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[1,110],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[1,88],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[1,11],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[1,56],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[1,55],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[1,96],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[1,10],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[1,122],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[1,72],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[1,71],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[1,64],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[1,113],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[1,139],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[1,150],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[1,169],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[1,165],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[1,151],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[1,163],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[1,32],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[1,16],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[1,108],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[1,100],[[1,5,14,38,19,29,34,4,12,11,6,30,43,40,42,16,10,7]]],[[4,1],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[4,31],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[4,104],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[4,9],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[4,8],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[4,27],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[4,12],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[4,65],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[4,110],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[4,88],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[4,11],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[4,56],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[4,55],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[4,96],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[4,10],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[4,122],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[4,72],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[4,71],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[4,64],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[4,113],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[4,139],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[4,150],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[4,169],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[4,165],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[4,151],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[4,163],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[4,32],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[4,16],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[4,108],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[4,100],[[1,3,5,4,7,6,11,19,21,17,15,12,16,20]]],[[3,1],[[1,5,14,4,10,17]]],[[3,31],[[1,5,14,4,10,17]]],[[3,104],[[1,5,14,4,10,17]]],[[3,9],[[1,5,14,4,10,17]]],[[3,8],[[1,5,14,4,10,17]]],[[3,27],[[1,5,14,4,10,17]]],[[3,12],[[1,5,14,4,10,17]]],[[3,65],[[1,5,14,4,10,17]]],[[3,110],[[1,5,14,4,10,17]]],[[3,88],[[1,5,14,4,10,17]]],[[3,11],[[1,5,14,4,10,17]]],[[3,56],[[1,5,14,4,10,17]]],[[3,55],[[1,5,14,4,10,17]]],[[3,96],[[1,5,14,4,10,17]]],[[3,10],[[1,5,14,4,10,17]]],[[3,122],[[1,5,14,4,10,17]]],[[3,72],[[1,5,14,4,10,17]]],[[3,71],[[1,5,14,4,10,17]]],[[3,64],[[1,5,14,4,10,17]]],[[3,113],[[1,5,14,4,10,17]]],[[3,139],[[1,5,14,4,10,17]]],[[3,150],[[1,5,14,4,10,17]]],[[3,169],[[1,5,14,4,10,17]]],[[3,165],[[1,5,14,4,10,17]]],[[3,151],[[1,5,14,4,10,17]]],[[3,163],[[1,5,14,4,10,17]]],[[3,32],[[1,5,14,4,10,17]]],[[3,16],[[1,5,14,4,10,17]]],[[3,108],[[1,5,14,4,10,17]]],[[3,100],[[1,5,14,4,10,17]]],[[2,1],[[1,5,7,4,13,16,12,18]]],[[2,31],[[1,5,7,4,13,16,12,18]]],[[2,104],[[1,5,7,4,13,16,12,18]]],[[2,9],[[1,5,7,4,13,16,12,18]]],[[2,8],[[1,5,7,4,13,16,12,18]]],[[2,27],[[1,5,7,4,13,16,12,18]]],[[2,12],[[1,5,7,4,13,16,12,18]]],[[2,65],[[1,5,7,4,13,16,12,18]]],[[2,110],[[1,5,7,4,13,16,12,18]]],[[2,88],[[1,5,7,4,13,16,12,18]]],[[2,11],[[1,5,7,4,13,16,12,18]]],[[2,56],[[1,5,7,4,13,16,12,18]]],[[2,55],[[1,5,7,4,13,16,12,18]]],[[2,96],[[1,5,7,4,13,16,12,18]]],[[2,10],[[1,5,7,4,13,16,12,18]]],[[2,122],[[1,5,7,4,13,16,12,18]]],[[2,72],[[1,5,7,4,13,16,12,18]]],[[2,71],[[1,5,7,4,13,16,12,18]]],[[2,64],[[1,5,7,4,13,16,12,18]]],[[2,113],[[1,5,7,4,13,16,12,18]]],[[2,139],[[1,5,7,4,13,16,12,18]]],[[2,150],[[1,5,7,4,13,16,12,18]]],[[2,169],[[1,5,7,4,13,16,12,18]]],[[2,165],[[1,5,7,4,13,16,12,18]]],[[2,151],[[1,5,7,4,13,16,12,18]]],[[2,163],[[1,5,7,4,13,16,12,18]]],[[2,32],[[1,5,7,4,13,16,12,18]]],[[2,16],[[1,5,7,4,13,16,12,18]]],[[2,108],[[1,5,7,4,13,16,12,18]]],[[2,100],[[1,5,7,4,13,16,12,18]]]]]],null,null,[[[1,2],[10,8,9],[],[]]]],[2,\"%s\",\"%s\"]]]",null,"generic"]]]`

	permissionsBody = `[[["xdSrCf","[[null,[\"%s\",7],[]]]",null,"1"]]]`
	suggestBody     = `[[["IJ4APc","[[null,[\"%s\"],[10],[2],4]]"]]]`
)

var listClusterNames = map[string]string{
	"TOP_FREE": "topselling_free", "TOP_PAID": "topselling_paid", "GROSSING": "topgrossing",
}

type ParsedObject struct {
	Data        map[string][]any
	ServiceData map[string]Service
}

type Service struct {
	ID      string  `json:"id"`
	Ext     float64 `json:"ext,omitempty"`
	Request []any   `json:"request,omitempty"`
}

var clusterMapping = shared.ClusterMapping{
	Title: []any{21, 1, 0},
	URL:   []any{21, 1, 2, 4, 2},
	Apps:  []any{"ds:3", 0, 1, 0, 21, 0},
	Token: []any{"ds:3", 0, 1, 0, 21, 1, 3, 1},
}

var clusterSpec = shared.ParsedSpec{
	Clusters: shared.ParsedClustersSpec{
		Path:          []any{1, 1},
		UserServiceID: "ag2B9c",
	},
}

var appDetailsMapping = shared.AppMapping{
	Title:     []any{"ds:5", 1, 2, 0, 0},
	Summary:   []any{"ds:5", 1, 2, 73, 0, 1},
	Score:     []any{"ds:5", 1, 2, 51, 0, 1},
	ScoreText: []any{"ds:5", 1, 2, 51, 0, 0},
	Price: shared.MappingWithFunc[float64, float64]{
		Path: []any{"ds:5", 1, 2, 57, 0, 0, 0, 0, 1, 0, 0},
		Fun: func(f float64) float64 {
			return f / 1000000
		},
	},
	PriceText: shared.MappingWithFunc[string, string]{
		Path: []any{"ds:5", 1, 2, 57, 0, 0, 0, 0, 1, 0, 2},
		Fun: func(f string) string {
			if f == "" {
				return "Free"
			}

			return f
		},
	},
	Free: shared.MappingWithFunc[float64, bool]{
		Path: []any{"ds:5", 1, 2, 57, 0, 0, 0, 0, 1, 0, 0},
		Fun: func(f float64) bool {
			return f == 0
		},
	},
	Currency: []any{"ds:5", 1, 2, 57, 0, 0, 0, 0, 1, 0, 1},
	Icon:     []any{"ds:5", 1, 2, 95, 0, 3, 2},
	Description: shared.MappingWithFunc[[]any, string]{
		Path: []any{"ds:5", 1, 2},
		Fun: func(a []any) string {
			description := parseDescription(a)

			return strings.ReplaceAll(description, "<br>", "\r\n")
		},
	},
	DescriptionText: shared.MappingWithFunc[[]any, string]{
		Path: []any{"ds:5", 1, 2},
		Fun:  parseDescription,
	},
	Installs:    []any{"ds:5", 1, 2, 13, 0},
	MinInstalls: []any{"ds:5", 1, 2, 13, 1},
	MaxInstalls: []any{"ds:5", 1, 2, 13, 2},
	Ratings:     []any{"ds:5", 1, 2, 51, 2, 1},
	Reviews:     []any{"ds:5", 1, 2, 51, 3, 1},
	Histogram: shared.MappingWithFunc[[]any, map[int]float64]{
		Path: []any{"ds:5", 1, 2, 51, 1},
		Fun: func(a []any) map[int]float64 {
			histogram := map[int]float64{1: 0, 2: 0, 3: 0, 4: 0, 5: 0}
			if len(a) == 0 {
				return histogram
			}

			for idx, path := range [][]any{
				{1, 1},
				{2, 1},
				{3, 1},
				{4, 1},
				{5, 1},
			} {
				value, ok := ramda.Path(path, a).(float64)
				if !ok {
					continue
				}

				histogram[idx+1] = value
			}

			return histogram
		},
	},
	Available: shared.MappingWithFunc[float64, bool]{
		Path: []any{"ds:5", 1, 2, 18, 0},
		Fun:  func(f float64) bool { return f > 0 },
	},
	OffersIAP: shared.MappingWithFunc[string, bool]{
		Path: []any{"ds:5", 1, 2, 19, 0},
		Fun:  func(s string) bool { return len(s) > 0 },
	},
	IAPRange: []any{"ds:5", 1, 2, 19, 0},
	AndroidVersion: shared.MappingWithFunc[string, string]{
		Path: []any{"ds:5", 1, 2, 140, 1, 1, 0, 0, 1},
		Fun: func(s string) string {
			if s == "" {
				return vary
			}

			number := strings.Split(s, " ")[0]

			_, err := strconv.ParseFloat(number, 64)
			if err != nil {
				return vary
			}

			return number
		},
	},
	AndroidVersionText: shared.MappingWithFunc[string, string]{
		Path: []any{"ds:5", 1, 2, 140, 1, 1, 0, 0, 1},
		Fun: func(s string) string {
			if s == "" {
				return "Varies with device"
			}

			return s
		},
	},
	Developer: []any{"ds:5", 1, 2, 68, 1, 4, 2},
	DeveloperID: shared.MappingWithFunc[string, string]{
		Path: []any{"ds:5", 1, 2, 68, 1, 4, 2},
		Fun: func(s string) string {
			return strings.Split(s, "id=")[1]
		},
	},
	DeveloperEmail:   []any{"ds:5", 1, 2, 69, 1, 0},
	DeveloperWebsite: []any{"ds:5", 1, 2, 69, 0, 5, 2},
	DeveloperAddress: []any{"ds:5", 1, 2, 69, 2, 0},
	PrivacyPolicy:    []any{"ds:5", 1, 2, 99, 0, 5, 2},
	DeveloperInternalID: shared.MappingWithFunc[string, string]{
		Path: []any{"ds:5", 1, 2, 68, 1, 4, 2},
		Fun: func(s string) string {
			return strings.Split(s, "id=")[1]
		},
	},
	Genre:         []any{"ds:5", 1, 2, 79, 0, 0, 0},
	GenreID:       []any{"ds:5", 1, 2, 79, 0, 0, 2},
	FamilyGenre:   []any{"ds:5", 0, 12, 13, 1, 0},
	FamilyGenreID: []any{"ds:5", 0, 12, 13, 1, 2},
	HeaderImage:   []any{"ds:5", 1, 2, 95, 0, 3, 2},
	Screenshots: shared.MappingWithFunc[[]any, []string]{
		Path: []any{"ds:5", 1, 2, 78, 0},
		Fun: func(a []any) []string {
			result := make([]string, 0, len(a))

			for _, screenshot := range a {
				raw, ok := ramda.Path([]any{3, 2}, screenshot).(string)
				if !ok {
					continue
				}

				result = append(result, raw)
			}

			return result
		},
	},
	Video:                    []any{"ds:5", 1, 2, 100, 0, 0, 3, 2},
	VideoImage:               []any{"ds:5", 1, 2, 100, 1, 0, 3, 2},
	PreviewVideo:             []any{"ds:5", 1, 2, 100, 1, 2, 0, 2},
	ContentRating:            []any{"ds:5", 1, 2, 9, 0},
	ContentRatingDescription: []any{"ds:5", 1, 2, 9, 2, 1},
	AdSupported: shared.MappingWithFunc[[]any, bool]{
		Path: []any{"ds:5", 1, 2, 48},
		Fun:  func(a []any) bool { return len(a) > 0 },
	},
	Released: []any{"ds:5", 1, 2, 10, 0},
	Updated: shared.MappingWithFunc[float64, float64]{
		Path: []any{"ds:5", 1, 2, 145, 0, 1, 0},
		Fun: func(i float64) float64 {
			return i * 1000
		},
	},
	Version: shared.MappingWithFunc[string, string]{
		Path: []any{"ds:5", 1, 2, 140, 0, 0, 0},
		Fun: func(s string) string {
			if s == "" {
				return vary
			}

			return s
		},
	},
	RecentChanges: []any{"ds:5", 1, 2, 144, 1, 1},
	Comments:      []any{"ds:9", 0},
}

type dataSafety struct {
	SharedData        []map[string]any
	CollectedData     []map[string]any
	PrivacyPolicyURL  string
	SecurityPractices []map[string]any
}

func (data dataSafety) toModel() models.DataSafety {
	return models.DataSafety{
		SharedData: shared.Map(data.SharedData, func(entry map[string]any) models.DataSafetyData {
			return models.DataSafetyData{
				Data:     safeMapIndex[string](entry, "data"),
				Optional: safeMapIndex[bool](entry, "optional"),
				Purpose:  safeMapIndex[string](entry, "purpose"),
				Type:     safeMapIndex[string](entry, "type"),
			}
		}),
		CollectedData: shared.Map(data.CollectedData, func(entry map[string]any) models.DataSafetyData {
			return models.DataSafetyData{
				Data:     safeMapIndex[string](entry, "data"),
				Optional: safeMapIndex[bool](entry, "optional"),
				Purpose:  safeMapIndex[string](entry, "purpose"),
				Type:     safeMapIndex[string](entry, "type"),
			}
		}),
		PrivacyPolicyURL: data.PrivacyPolicyURL,
		SecurityPractice: shared.Map(data.SecurityPractices, func(entry map[string]any) models.DataSafetyPractice {
			return models.DataSafetyPractice{
				Practice:    safeMapIndex[string](entry, "practice"),
				Description: safeMapIndex[string](entry, "description"),
			}
		}),
	}
}

type review struct {
	ID        string
	URL       string
	Title     string
	Summary   string
	Score     float64
	ScoreText string
	UserImage string
	UserName  string
	Version   string
	Date      time.Time
	ReplyText string
	ReplyDate time.Time
	Criteria  map[string]float64
	TumbsUp   float64
}
